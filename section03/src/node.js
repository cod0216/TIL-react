/*
프로젝트를 부르는 다른 말이 있는데 바로 패키지 이다.
Node.Js 환경에서는 우리가 여러개의 JavaScript 파일로 어떠한 목적을 갖는 프로그램을 만들 때 모두 다 이 Package라는 단위로 프로그램을 만들게 된다.

그래서 우리가 앞으로 만들 모든 Javascript 앱, 모든 React 앱들도 이런 패키지 라는 단위로 만들어지게 되며, 우리가 앞으로 사용할 모든 라이브러리들도 모두 다 이런
Package라는 단위로 만들어져 있다.

그렇기 때문에 우리가 앞으로 Node.js를 이용해서  JavaScript로 무언가를 위해서는 가장 먼저 이 패키지라는 것을 이해하고 사용할 줄 알아야 된다
*/
// 컨트롤 + j 를 누르면 터미널이 생성



//
/*
모듈 시스템(Moudle System)이란
모듈을 다룰 수 있는 어떠한 시스템을 말한다. 이걸 자세히 이해하려면 일단은 모듈이라는게 무엇을 의미하는건지 살펴볼 필요가 있다.

간단한 온라인 쇼핑몰을 만들어야 된다라고 가정을 해보자
쇼핑몰에는 로그인, 회원가입 유저관리 가 있고 장바구니 등 다양한 기능들이 있다.

이런 다양한 기능들을 하나의 파일에만 다 작성하게 되면 어떻게 될까?

그러면 아마 파일에 작성된 코드의 양이 어마어마 할것이다.

내가 수정해야 되는 곳이 어디인지 매번 찾아가야 되기 때문에 굉장히 효율이 덜어지게 된다.

생산성이 안좋아 지게 된다.

그래서 기능별로 파일을 나눠서 개발하게 된다.

그래서 로그인이나 회원가입을 관리하는 User관리 기능은 User.js에

장바구니를 관리하는 기능은 Cart.js에 그리고 결제를 관리하는 기능은 Payment.js 요런식으로
기능별로 파일을 깔끔하게 분리해서 개발하는게 좀 더 일반적이다.

그러면 만약 로그인 같은 회원관리 기능에 버그가 나면 이때에는 user 파일만 열어서
버그를 수정하면 되고 그리고 장바구니에 새로운 기능을 추가하고 싶다면 그때에는 
cart.js 파일만 열어서 기능을 추가하면 된다.

이때 uesr.js나 Cart.js 또는 payment.js파일처럼 기능별로
나뉘어진 이런 각각의 자바 스크립트 파일들을 우리는 모듈이라는 이름으로 부른다.

그래서 회원관리 기능이 들어있는 user.js는 user모듈, 장바구니 기능이 들어있는 카트.js는 cart.js 모듈 이렇게 부른다.

이렇게 모듈을 다루는 다양한 기능을 제공하는 시스템을 우리는 모듈 시스템이라고 부른다.

그리고 자바스크립트에는 이런 모듈 시스템이 굉장이 여러가지가 존재한다.

가장 대표적으로 많이 사용되는 건 CommonJs와 ESModule이라는 두개의 모듈 시스템에 대해서 알아보자

그 외에는 AMD, UMD 등 다양하다.

*/
